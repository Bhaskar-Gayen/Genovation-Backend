version: '3.8'

services:
  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: gemini-backend-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/ginovation_tech
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SECURITY_ENVIRONMENT=development
      - SECURITY_DEBUG=true
      - SECURITY_CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - LOG_LEVEL=INFO
      - LOG_FORMAT=detailed
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - db
      - redis
    networks:
      - genovation-tech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: gemini-backend-db
    environment:
      - POSTGRES_DB=ginovation_tech
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - genovation-tech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ginovation_tech"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gemini-backend-redis
    command: redis-server --appendonly yes --requirepass redis_password
    environment:
      - REDIS_PASSWORD=redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - genovation-tech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: genovation-tech-backend-celery-worker
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/ginovation_tech
      - REDIS_URL=redis://redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - gemini-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat Scheduler (for periodic tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: gemini-backend-celery-beat
    command: celery -A celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/ginovation_tech
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      - db
      - redis
    networks:
      - gemini-network
    restart: unless-stopped

  # Flower (Celery monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: gemini-backend-flower
    command: celery -A celery_app flower --port=5555
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:flower_password
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - gemini-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  gemini-network:
    driver: bridge
